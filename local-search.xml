<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025力扣刷题记录</title>
    <link href="/2025/04/27/2025%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/04/27/2025%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="3270-求出数字答案"><a href="#3270-求出数字答案" class="headerlink" title="3270. 求出数字答案"></a><a href="https://leetcode.cn/problems/find-the-key-of-the-numbers/">3270. 求出数字答案</a></h1><h2 id="1-字符串判断"><a href="#1-字符串判断" class="headerlink" title="1.字符串判断"></a>1.字符串判断</h2><p>先把这三个数转为填充后的字符串，然后对每一位进行判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">generateKey</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2, <span class="hljs-type">int</span> num3)</span> &#123;<br>        List&lt;Integer&gt; numList = List.of(num1, num2, num3);<br>        ArrayList&lt;String&gt; strings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        numList.forEach(num-&gt;&#123;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(Integer.toString(num));<br>            <span class="hljs-comment">// 在前面补0的个数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span> - s.length();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; count;i++)&#123;<br>                s.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>            &#125;<br>            strings.add(String.valueOf(s));<br>        &#125;);<br>        <span class="hljs-comment">//System.out.println(&quot;strings = &quot; + strings);</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">4</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Character.MAX_VALUE;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">3</span>;j++)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> strings.get(j);<br>                min =  Math.min(min,s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            &#125;<br>            builder.append(min);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(builder.toString());<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-从最低位开始计算"><a href="#2-从最低位开始计算" class="headerlink" title="2. 从最低位开始计算"></a>2. 从最低位开始计算</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">generateKey</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2, <span class="hljs-type">int</span> num3)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pow</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">// 获取这三个数最小各位值</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Math.min(num1 % <span class="hljs-number">10</span>, num2 % <span class="hljs-number">10</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(t, num3 % <span class="hljs-number">10</span>);<br>            ans = ans + min * pow;<br>            num1 /= <span class="hljs-number">10</span>;<br>            num2 /= <span class="hljs-number">10</span>;<br>            num3 /= <span class="hljs-number">10</span>;<br>            pow *= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75. 颜色分类"></a><a href="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a></h1><p>思路就是用分别用一个计数器，分别记录0和（0,1)出现的次数，此时n0就是到目前为止出现的最后一个0的下标，n1同理。然后总是假设当前这块板是蓝色的，为它刷上蓝色，接着判断当前值是否等于1，如果是，则把它刷为白色，0也是同理，类似刷油漆的过程，旧的会被新的覆盖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-comment">// 到第i个数为止，出现0的次数，也就是到目前为止，最后一个0的下标</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">n0</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-comment">// 到第i个数为止，出现0和1的次数，也就是到目前为止，最后一个1的下标</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; nums.length;i++)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[i];<br>           nums[i] = <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">2</span>)&#123;<br>               nums[n1++] = <span class="hljs-number">1</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">1</span>)&#123;<br>               nums[n0++] = <span class="hljs-number">0</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="2444-统计定界子数组的数目"><a href="#2444-统计定界子数组的数目" class="headerlink" title="2444. 统计定界子数组的数目"></a><a href="https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/">2444. 统计定界子数组的数目</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSubarrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> minK, <span class="hljs-type">int</span> maxK)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 窗口中最后一出现minK下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 窗口中最后一出现maxK下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 窗口左边界</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; nums.length;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-comment">// 寻找最后一次出现minK或者maxK的下标</span><br>            <span class="hljs-comment">// 为什么要这样做：因为当窗口确定时，[left,right]中一定存在minK和maxK，此时如果窗口中出现多个minK和maxK</span><br>            <span class="hljs-comment">// 如果对应的下标越靠后，能够确定的子数组越多，防止统计不到</span><br>            <span class="hljs-keyword">if</span>(num == minK)&#123;<br>                minIndex = i;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(num == maxK)&#123;<br>                maxIndex = i;<br>            &#125;<br>            <span class="hljs-comment">// 当出现一个小于minK或者大于maxK的值时，重置窗口</span><br>            <span class="hljs-keyword">if</span>( num &gt; maxK || num &lt; minK)&#123;<br>                left = i+<span class="hljs-number">1</span>;<br>                minIndex = -<span class="hljs-number">1</span>;<br>                maxIndex = -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 能够组成窗口时，累加答案</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(minIndex != -<span class="hljs-number">1</span> &amp;&amp; maxIndex != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-comment">// [left - minIndex - maxIndex - right] 或 [left - maxIndex - minIndex - right]</span><br>                <span class="hljs-comment">// 此时[left ... min]都是满足条件的子数组</span><br>                ans += Math.min(maxIndex, minIndex) - left + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="2302-统计得分小于-K-的子数组数目"><a href="#2302-统计得分小于-K-的子数组数目" class="headerlink" title="2302. 统计得分小于 K 的子数组数目"></a><a href="https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/">2302. 统计得分小于 K 的子数组数目</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSubarrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">long</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;right &lt; nums.length;right++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> nums[right];<br>        <span class="hljs-comment">// 将当前数加入窗口中</span><br>        sum += num;<br>        <span class="hljs-comment">// 内循环，如果当前窗口和*窗口长度 大于等于 k时，移动左窗口，直至窗口满足条件</span><br>        <span class="hljs-keyword">while</span> (sum * (right - left + <span class="hljs-number">1</span>) &gt;= k)&#123;<br>            sum -= nums[left];<br>            left++;<br>        &#125;<br>        <span class="hljs-comment">// 这里是随着当前数加入窗口后当增加的子数组个数，而不是当前窗口内能够组成的子数组个数</span><br>        <span class="hljs-comment">// 比如[2,1,4,3]当4加入窗口中时，增加的子数组为[2,1,4,3],[1,4,3],[4,3],[4]共计4个</span><br>        <span class="hljs-comment">// 因为之前的已经统计过了，不用再次计算</span><br>        ans += right - left + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/27/hello-world/"/>
    <url>/2025/04/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
