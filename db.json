{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1745746203105},{"_id":"source/_posts/2025刷题记录.md","hash":"98dca4bc5fe127cfa10fb549ac7902928125ef03","modified":1745808567790},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1745749124803},{"_id":"themes/hexo-theme-fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1745749124671},{"_id":"themes/hexo-theme-fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1745749124672},{"_id":"themes/hexo-theme-fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1745749124672},{"_id":"themes/hexo-theme-fluid/README_en.md","hash":"85656f2a23cc5e31420f0118bf5541b6e9f058b6","modified":1745749124684},{"_id":"themes/hexo-theme-fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1745749124682},{"_id":"themes/hexo-theme-fluid/languages/de.yml","hash":"f814263ded504cb4c50a8b66157bdd71f553be1b","modified":1745749124686},{"_id":"themes/hexo-theme-fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1745749124681},{"_id":"themes/hexo-theme-fluid/README.md","hash":"34e3223851da1596b9ff051f2b29c6004edca8a1","modified":1745749124682},{"_id":"themes/hexo-theme-fluid/languages/en.yml","hash":"415e3403182e1282386f28b9d61343f147519163","modified":1745749124687},{"_id":"themes/hexo-theme-fluid/package.json","hash":"fd6756866314aaf4b15d734a83b85aa09aa0b5ed","modified":1745749124738},{"_id":"themes/hexo-theme-fluid/_config.yml","hash":"d74de97fdbccd5364ee8d88808f584032181bda5","modified":1745749569161},{"_id":"themes/hexo-theme-fluid/languages/es.yml","hash":"0ad94ddf1ca868a67b5b84aed257a30572962210","modified":1745749124688},{"_id":"themes/hexo-theme-fluid/languages/eo.yml","hash":"314b97a7e68093328675acfd308d839b1d772ac9","modified":1745749124687},{"_id":"themes/hexo-theme-fluid/languages/ru.yml","hash":"998112b384b574e0e29c6ea16e4c1ebce1c15a4c","modified":1745749124689},{"_id":"themes/hexo-theme-fluid/languages/ja.yml","hash":"65a90f294f6c73245e8250e87d124630ad10b389","modified":1745749124689},{"_id":"themes/hexo-theme-fluid/languages/zh-CN.yml","hash":"497b3dea5058f718da225a7a443e916da895ea10","modified":1745749124690},{"_id":"themes/hexo-theme-fluid/languages/zh-HK.yml","hash":"05418d0bca261de386872be65027bf4498758788","modified":1745749124692},{"_id":"themes/hexo-theme-fluid/languages/zh-TW.yml","hash":"ded0621e63b1f8b241be21f6e9b52d4f36edbcd0","modified":1745749124693},{"_id":"themes/hexo-theme-fluid/layout/about.ejs","hash":"2f3ea36713f0fa91d8d61d39fcf9e584372de818","modified":1745749124731},{"_id":"themes/hexo-theme-fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1745749124694},{"_id":"themes/hexo-theme-fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1745749124732},{"_id":"themes/hexo-theme-fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1745749124734},{"_id":"themes/hexo-theme-fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1745749124735},{"_id":"themes/hexo-theme-fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1745749124732},{"_id":"themes/hexo-theme-fluid/layout/index.ejs","hash":"dde1f6a27c8d09c38850a691089937f181b6c035","modified":1745749124734},{"_id":"themes/hexo-theme-fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1745749124733},{"_id":"themes/hexo-theme-fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1745749124736},{"_id":"themes/hexo-theme-fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1745749124737},{"_id":"themes/hexo-theme-fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1745749124737},{"_id":"themes/hexo-theme-fluid/layout/post.ejs","hash":"c8da695dc1b01b715909ae6f1052ccaebdf9db4c","modified":1745749124736},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1745749124674},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1745749124676},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1745749124676},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1745749124675},{"_id":"themes/hexo-theme-fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1745749124679},{"_id":"themes/hexo-theme-fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1745749124681},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1745749124678},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1745749124697},{"_id":"themes/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1745749124695},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1745749124678},{"_id":"themes/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1745749124680},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1745749124696},{"_id":"themes/hexo-theme-fluid/layout/_partials/head.ejs","hash":"a0bcbbfc34efaef3b23c6b531e7f3201f2eab2dd","modified":1745749124711},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1745749124697},{"_id":"themes/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1745749124714},{"_id":"themes/hexo-theme-fluid/layout/_partials/css.ejs","hash":"901280e6fb3194c30542751d04f27e78b42d3c6f","modified":1745749124708},{"_id":"themes/hexo-theme-fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1745749124711},{"_id":"themes/hexo-theme-fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1745749124739},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"6bb3335b5486d4bee2ed42f8bef57903066bc234","modified":1745749124708},{"_id":"themes/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1745749124730},{"_id":"themes/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1745749124747},{"_id":"themes/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1745749124715},{"_id":"themes/hexo-theme-fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1745749124748},{"_id":"themes/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1745749124753},{"_id":"themes/hexo-theme-fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1745749124756},{"_id":"themes/hexo-theme-fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1745749124731},{"_id":"themes/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"67637461e3f94f9e9675369eb7ff015355d9ec54","modified":1745749124749},{"_id":"themes/hexo-theme-fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1745749124754},{"_id":"themes/hexo-theme-fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1745749124756},{"_id":"themes/hexo-theme-fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1745749124755},{"_id":"themes/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1745749124755},{"_id":"themes/hexo-theme-fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1745749124756},{"_id":"themes/hexo-theme-fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1745749124760},{"_id":"themes/hexo-theme-fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1745749124758},{"_id":"themes/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"1ff4ea054f2c735dfaccb0be90f1708a2a750bc8","modified":1745749124761},{"_id":"themes/hexo-theme-fluid/scripts/helpers/utils.js","hash":"f57be245e6e7228673e1dec3a3477e731492c5c1","modified":1745749124759},{"_id":"themes/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"0bb33314aa5cfe326ab9bb14b545e343e4db4193","modified":1745749124759},{"_id":"themes/hexo-theme-fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1745749124762},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1745749124806},{"_id":"themes/hexo-theme-fluid/scripts/tags/fold.js","hash":"a93e2603021ad38714e870399767bea24e7cbe3e","modified":1745749124761},{"_id":"themes/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1745749124764},{"_id":"themes/hexo-theme-fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1745749124765},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1745749124807},{"_id":"themes/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1745749124750},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1745749124808},{"_id":"themes/hexo-theme-fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1745749124762},{"_id":"themes/hexo-theme-fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1745749124751},{"_id":"themes/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1745749124766},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1745749124809},{"_id":"themes/hexo-theme-fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1745749124751},{"_id":"themes/hexo-theme-fluid/scripts/utils/crypto.js","hash":"474b00a57f43dbe7bc2876d637ece4214d016c06","modified":1745749124767},{"_id":"themes/hexo-theme-fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1745749124768},{"_id":"themes/hexo-theme-fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1745749124770},{"_id":"themes/hexo-theme-fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1745749124771},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1745749124810},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1745749124812},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1745749124813},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1745749124815},{"_id":"themes/hexo-theme-fluid/source/js/events.js","hash":"3efd602cdb694902d6e74c4eb1e5bd70120ac5b1","modified":1745749124817},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","hash":"e7addcc88eb73dec4a9a8641a4bb68966a38a65d","modified":1745749124816},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1745749124817},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1745749124815},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1745749124818},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1745749124820},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1745749124818},{"_id":"themes/hexo-theme-fluid/source/js/umami-view.js","hash":"370ab30ab88c596d85327dbd7db3bafd49489fdd","modified":1745749124820},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1745749124821},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1745749124822},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1745749124699},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1745749124699},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1745749124699},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1745749124701},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1745749124698},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1745749124703},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1745749124704},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1745749124702},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1745749124702},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1745749124705},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1745749124707},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1745749124710},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"df6bae1a93827991049f7a33f6a69681c60eab0e","modified":1745749124707},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"f8fe8e58b83f627db82c0dbeb663389efc33c1c6","modified":1745749124717},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"047bece1db5cdf96cb78a44c6420ce3e92e6a9ca","modified":1745749124711},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1745749124718},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1745749124719},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1745749124720},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1745749124720},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1745749124722},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1745749124721},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"acc72c3284fe906a4505132c3d9a4720d80e6fcb","modified":1745749124723},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1745749124724},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1745749124722},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1745749124713},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1745749124724},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1745749124714},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"26905d5862b1531ebcc175af15178dabeecc81c8","modified":1745749124726},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1745749124726},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1745749124727},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"73827074db4e0fc3d52c51a76285df87aa5e5a7f","modified":1745749124727},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1745749124728},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1745749124730},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1745749124729},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1745749124740},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1745749124741},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"d103e4bf612b2445bb136712d57b81e784a313e2","modified":1745749124742},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"da987411ae4a4e6896a9b8af1fce6209192af28e","modified":1745749124742},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1745749124743},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1745749124743},{"_id":"themes/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1745749124774},{"_id":"themes/hexo-theme-fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1745749124773},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1745749124745},{"_id":"themes/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1745749124805},{"_id":"themes/hexo-theme-fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1745749124806},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1745749124777},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1745749124776},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1745749124796},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1745749124790},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1745749124791},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"66d5b045c0e54001d3c98c5901d72590fe08acc4","modified":1745749124790},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1745749124793},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1745749124795},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1745749124792},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1745749124792},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1745749124797},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"bac20c8fb20276b08972df5ecc7a5850a72393f4","modified":1745749124797},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1745749124804},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1745749124799},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1745749124801},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"6a35a450bd0a12f68fd92aac3f88b23475a98d46","modified":1745749124802},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1745749124799},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1745749124778},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"31c64c3fae4a0fc4747d8afeb72f7a9667c5326c","modified":1745749124802},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1745749124779},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1745749124779},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1745749124780},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"88c3c2d99a097142a87eeec0c7c65a3789f25117","modified":1745749124783},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1745749124781},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1745749124783},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1745749124784},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1745749124787},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1745749124781},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1745749124785},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1745749124785},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1745749124786},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1745749124788},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1745749124789},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1745749124788},{"_id":"themes/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1745749124812},{"_id":"public/local-search.xml","hash":"364e7b5e66664b12f13cb3de2312b90b2575d447","modified":1745835884718},{"_id":"public/2025/04/27/hello-world/index.html","hash":"61a08ceb7f6aa51c7af43bf3b6400a18dbc6e3af","modified":1745835884718},{"_id":"public/2025/04/27/2025刷题记录/index.html","hash":"87950aae197770f8a235b17a8b296e0c920eb3a2","modified":1745835884718},{"_id":"public/archives/index.html","hash":"19a3e7c24988e886cd47280edcda4b42faf4b61a","modified":1745835884718},{"_id":"public/index.html","hash":"d94cdd4aee6ceb1e991bb965a6b59779f0d38065","modified":1745835884718},{"_id":"public/archives/2025/index.html","hash":"4cf61640c1a970c5a431b18a6be81c7d28ca992f","modified":1745835884718},{"_id":"public/archives/2025/04/index.html","hash":"8ab0bb21048be8620bed4475fcaee298e1744ee2","modified":1745835884718},{"_id":"public/categories/index.html","hash":"6c7eceff084221cf55c09804f02598fa7798b7e6","modified":1745835884718},{"_id":"public/tags/index.html","hash":"6c8b5c26cbc32f019a88fbd926de98b736db2a5e","modified":1745835884718},{"_id":"public/links/index.html","hash":"2f0b36f1355bff22929115d1e19272566b9ad60d","modified":1745835884718},{"_id":"public/404.html","hash":"e9fada97fffc4360c07c7db6fb29008498872854","modified":1745835884718},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1745835884718},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1745835884718},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1745835884718},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1745835884718},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1745835884718},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1745835884718},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1745835884718},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1745835884718},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1745835884718},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1745835884718},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1745835884718},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1745835884718},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1745835884718},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1745835884718},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1745835884718},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1745835884718},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1745835884718},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1745835884718},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1745835884718}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"2025力扣刷题记录","_content":"\n# [3270. 求出数字答案](https://leetcode.cn/problems/find-the-key-of-the-numbers/)\n\n## 1.字符串判断\n\n先把这三个数转为填充后的字符串，然后对每一位进行判断。\n\n```java\npublic int generateKey(int num1, int num2, int num3) {\n        List<Integer> numList = List.of(num1, num2, num3);\n        ArrayList<String> strings = new ArrayList<>();\n        numList.forEach(num->{\n            StringBuilder s = new StringBuilder(Integer.toString(num));\n            // 在前面补0的个数\n            int count = 4 - s.length();\n            for(int i = 0;i < count;i++){\n                s.insert(0, \"0\");\n            }\n            strings.add(String.valueOf(s));\n        });\n        //System.out.println(\"strings = \" + strings);\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0;i < 4;i++){\n            int min = Character.MAX_VALUE;\n            for(int j = 0;j < 3;j++){\n                String s = strings.get(j);\n                min =  Math.min(min,s.charAt(i) - '0');\n            }\n            builder.append(min);\n        }\n        return Integer.parseInt(builder.toString());\n    }\n```\n\n## 2. 从最低位开始计算\n\n```java\npublic int generateKey(int num1, int num2, int num3) {\n        int ans = 0;\n        int pow = 1;\n        for (int i = 0; i < 4; i++) {\n            // 获取这三个数最小各位值\n            int t = Math.min(num1 % 10, num2 % 10);\n            int min = Math.min(t, num3 % 10);\n            ans = ans + min * pow;\n            num1 /= 10;\n            num2 /= 10;\n            num3 /= 10;\n            pow *= 10;\n        }\n        return ans;\n    }\n```\n\n\n\n# [75. 颜色分类](https://leetcode.cn/problems/sort-colors/)\n\n思路就是用分别用一个计数器，分别记录0和（0,1)出现的次数，此时n0就是到目前为止出现的最后一个0的下标，n1同理。然后总是假设当前这块板是蓝色的，为它刷上蓝色，接着判断当前值是否等于1，如果是，则把它刷为白色，0也是同理，类似刷油漆的过程，旧的会被新的覆盖。\n\n```java\n public void sortColors(int[] nums) {\n        // 到第i个数为止，出现0的次数，也就是到目前为止，最后一个0的下标\n        int n0 = 0;\n        // 到第i个数为止，出现0和1的次数，也就是到目前为止，最后一个1的下标\n        int n1 = 0;\n        for(int i = 0;i < nums.length;i++){\n            int num = nums[i];\n            nums[i] = 2;\n            if(num < 2){\n                nums[n1++] = 1;\n            }\n            if(num < 1){\n                nums[n0++] = 0;\n            }\n        }\n    }\n```\n\n\n\n# [2444. 统计定界子数组的数目](https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/)\n\n```java\npublic long countSubarrays(int[] nums, int minK, int maxK) {\n        long ans = 0;\n        // 窗口中最后一出现minK下标\n        int minIndex = -1;\n        // 窗口中最后一出现maxK下标\n        int maxIndex = -1;\n        // 窗口左边界\n        int left = 0;\n        for(int i = 0;i < nums.length;i++){\n            int num = nums[i];\n            // 寻找最后一次出现minK或者maxK的下标\n            // 为什么要这样做：因为当窗口确定时，[left,right]中一定存在minK和maxK，此时如果窗口中出现多个minK和maxK\n            // 如果对应的下标越靠后，能够确定的子数组越多，防止统计不到\n            if(num == minK){\n                minIndex = i;\n            }\n            if(num == maxK){\n                maxIndex = i;\n            }\n            // 当出现一个小于minK或者大于maxK的值时，重置窗口\n            if( num > maxK || num < minK){\n                left = i+1;\n                minIndex = -1;\n                maxIndex = -1;\n            }\n            // 能够组成窗口时，累加答案\n            else if(minIndex != -1 && maxIndex != -1){\n                // [left - minIndex - maxIndex - right] 或 [left - maxIndex - minIndex - right]\n                // 此时[left ... min]都是满足条件的子数组\n                ans += Math.min(maxIndex, minIndex) - left + 1;\n            }\n        }\n        return ans;\n    }\n```\n\n\n\n\n\n# [2302. 统计得分小于 K 的子数组数目](https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/)\n\n```java\npublic long countSubarrays(int[] nums, long k) {\n    int left = 0;\n    long sum = 0;\n    long ans = 0;\n    for(int right = 0;right < nums.length;right++){\n        int num = nums[right];\n        // 将当前数加入窗口中\n        sum += num;\n        // 内循环，如果当前窗口和*窗口长度 大于等于 k时，移动左窗口，直至窗口满足条件\n        while (sum * (right - left + 1) >= k){\n            sum -= nums[left];\n            left++;\n        }\n        // 这里是随着当前数加入窗口后当增加的子数组个数，而不是当前窗口内能够组成的子数组个数\n        // 比如[2,1,4,3]当4加入窗口中时，增加的子数组为[2,1,4,3],[1,4,3],[4,3],[4]共计4个\n        // 因为之前的已经统计过了，不用再次计算\n        ans += right - left + 1;\n    }\n    return ans;\n}\n```\n\n","source":"_posts/2025刷题记录.md","raw":"---\ntitle: 2025力扣刷题记录\n---\n\n# [3270. 求出数字答案](https://leetcode.cn/problems/find-the-key-of-the-numbers/)\n\n## 1.字符串判断\n\n先把这三个数转为填充后的字符串，然后对每一位进行判断。\n\n```java\npublic int generateKey(int num1, int num2, int num3) {\n        List<Integer> numList = List.of(num1, num2, num3);\n        ArrayList<String> strings = new ArrayList<>();\n        numList.forEach(num->{\n            StringBuilder s = new StringBuilder(Integer.toString(num));\n            // 在前面补0的个数\n            int count = 4 - s.length();\n            for(int i = 0;i < count;i++){\n                s.insert(0, \"0\");\n            }\n            strings.add(String.valueOf(s));\n        });\n        //System.out.println(\"strings = \" + strings);\n        StringBuilder builder = new StringBuilder();\n        for(int i = 0;i < 4;i++){\n            int min = Character.MAX_VALUE;\n            for(int j = 0;j < 3;j++){\n                String s = strings.get(j);\n                min =  Math.min(min,s.charAt(i) - '0');\n            }\n            builder.append(min);\n        }\n        return Integer.parseInt(builder.toString());\n    }\n```\n\n## 2. 从最低位开始计算\n\n```java\npublic int generateKey(int num1, int num2, int num3) {\n        int ans = 0;\n        int pow = 1;\n        for (int i = 0; i < 4; i++) {\n            // 获取这三个数最小各位值\n            int t = Math.min(num1 % 10, num2 % 10);\n            int min = Math.min(t, num3 % 10);\n            ans = ans + min * pow;\n            num1 /= 10;\n            num2 /= 10;\n            num3 /= 10;\n            pow *= 10;\n        }\n        return ans;\n    }\n```\n\n\n\n# [75. 颜色分类](https://leetcode.cn/problems/sort-colors/)\n\n思路就是用分别用一个计数器，分别记录0和（0,1)出现的次数，此时n0就是到目前为止出现的最后一个0的下标，n1同理。然后总是假设当前这块板是蓝色的，为它刷上蓝色，接着判断当前值是否等于1，如果是，则把它刷为白色，0也是同理，类似刷油漆的过程，旧的会被新的覆盖。\n\n```java\n public void sortColors(int[] nums) {\n        // 到第i个数为止，出现0的次数，也就是到目前为止，最后一个0的下标\n        int n0 = 0;\n        // 到第i个数为止，出现0和1的次数，也就是到目前为止，最后一个1的下标\n        int n1 = 0;\n        for(int i = 0;i < nums.length;i++){\n            int num = nums[i];\n            nums[i] = 2;\n            if(num < 2){\n                nums[n1++] = 1;\n            }\n            if(num < 1){\n                nums[n0++] = 0;\n            }\n        }\n    }\n```\n\n\n\n# [2444. 统计定界子数组的数目](https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/)\n\n```java\npublic long countSubarrays(int[] nums, int minK, int maxK) {\n        long ans = 0;\n        // 窗口中最后一出现minK下标\n        int minIndex = -1;\n        // 窗口中最后一出现maxK下标\n        int maxIndex = -1;\n        // 窗口左边界\n        int left = 0;\n        for(int i = 0;i < nums.length;i++){\n            int num = nums[i];\n            // 寻找最后一次出现minK或者maxK的下标\n            // 为什么要这样做：因为当窗口确定时，[left,right]中一定存在minK和maxK，此时如果窗口中出现多个minK和maxK\n            // 如果对应的下标越靠后，能够确定的子数组越多，防止统计不到\n            if(num == minK){\n                minIndex = i;\n            }\n            if(num == maxK){\n                maxIndex = i;\n            }\n            // 当出现一个小于minK或者大于maxK的值时，重置窗口\n            if( num > maxK || num < minK){\n                left = i+1;\n                minIndex = -1;\n                maxIndex = -1;\n            }\n            // 能够组成窗口时，累加答案\n            else if(minIndex != -1 && maxIndex != -1){\n                // [left - minIndex - maxIndex - right] 或 [left - maxIndex - minIndex - right]\n                // 此时[left ... min]都是满足条件的子数组\n                ans += Math.min(maxIndex, minIndex) - left + 1;\n            }\n        }\n        return ans;\n    }\n```\n\n\n\n\n\n# [2302. 统计得分小于 K 的子数组数目](https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/)\n\n```java\npublic long countSubarrays(int[] nums, long k) {\n    int left = 0;\n    long sum = 0;\n    long ans = 0;\n    for(int right = 0;right < nums.length;right++){\n        int num = nums[right];\n        // 将当前数加入窗口中\n        sum += num;\n        // 内循环，如果当前窗口和*窗口长度 大于等于 k时，移动左窗口，直至窗口满足条件\n        while (sum * (right - left + 1) >= k){\n            sum -= nums[left];\n            left++;\n        }\n        // 这里是随着当前数加入窗口后当增加的子数组个数，而不是当前窗口内能够组成的子数组个数\n        // 比如[2,1,4,3]当4加入窗口中时，增加的子数组为[2,1,4,3],[1,4,3],[4,3],[4]共计4个\n        // 因为之前的已经统计过了，不用再次计算\n        ans += right - left + 1;\n    }\n    return ans;\n}\n```\n\n","slug":"2025刷题记录","published":1,"date":"2025-04-27T10:40:57.644Z","updated":"2025-04-28T02:49:27.790Z","comments":1,"layout":"post","photos":[],"_id":"cma0xlyzm000044v9ccm5aofk","content":"<h1 id=\"3270-求出数字答案\"><a href=\"#3270-求出数字答案\" class=\"headerlink\" title=\"3270. 求出数字答案\"></a><a href=\"https://leetcode.cn/problems/find-the-key-of-the-numbers/\">3270. 求出数字答案</a></h1><h2 id=\"1-字符串判断\"><a href=\"#1-字符串判断\" class=\"headerlink\" title=\"1.字符串判断\"></a>1.字符串判断</h2><p>先把这三个数转为填充后的字符串，然后对每一位进行判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">generateKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2, <span class=\"hljs-type\">int</span> num3)</span> &#123;<br>        List&lt;Integer&gt; numList = List.of(num1, num2, num3);<br>        ArrayList&lt;String&gt; strings = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        numList.forEach(num-&gt;&#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(Integer.toString(num));<br>            <span class=\"hljs-comment\">// 在前面补0的个数</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span> - s.length();<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; count;i++)&#123;<br>                s.insert(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;0&quot;</span>);<br>            &#125;<br>            strings.add(String.valueOf(s));<br>        &#125;);<br>        <span class=\"hljs-comment\">//System.out.println(&quot;strings = &quot; + strings);</span><br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">4</span>;i++)&#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Character.MAX_VALUE;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j &lt; <span class=\"hljs-number\">3</span>;j++)&#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> strings.get(j);<br>                min =  Math.min(min,s.charAt(i) - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<br>            builder.append(min);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Integer.parseInt(builder.toString());<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-从最低位开始计算\"><a href=\"#2-从最低位开始计算\" class=\"headerlink\" title=\"2. 从最低位开始计算\"></a>2. 从最低位开始计算</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">generateKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2, <span class=\"hljs-type\">int</span> num3)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pow</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;<br>            <span class=\"hljs-comment\">// 获取这三个数最小各位值</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Math.min(num1 % <span class=\"hljs-number\">10</span>, num2 % <span class=\"hljs-number\">10</span>);<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Math.min(t, num3 % <span class=\"hljs-number\">10</span>);<br>            ans = ans + min * pow;<br>            num1 /= <span class=\"hljs-number\">10</span>;<br>            num2 /= <span class=\"hljs-number\">10</span>;<br>            num3 /= <span class=\"hljs-number\">10</span>;<br>            pow *= <span class=\"hljs-number\">10</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"75-颜色分类\"><a href=\"#75-颜色分类\" class=\"headerlink\" title=\"75. 颜色分类\"></a><a href=\"https://leetcode.cn/problems/sort-colors/\">75. 颜色分类</a></h1><p>思路就是用分别用一个计数器，分别记录0和（0,1)出现的次数，此时n0就是到目前为止出现的最后一个0的下标，n1同理。然后总是假设当前这块板是蓝色的，为它刷上蓝色，接着判断当前值是否等于1，如果是，则把它刷为白色，0也是同理，类似刷油漆的过程，旧的会被新的覆盖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sortColors</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> &#123;<br>       <span class=\"hljs-comment\">// 到第i个数为止，出现0的次数，也就是到目前为止，最后一个0的下标</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n0</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-comment\">// 到第i个数为止，出现0和1的次数，也就是到目前为止，最后一个1的下标</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; nums.length;i++)&#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[i];<br>           nums[i] = <span class=\"hljs-number\">2</span>;<br>           <span class=\"hljs-keyword\">if</span>(num &lt; <span class=\"hljs-number\">2</span>)&#123;<br>               nums[n1++] = <span class=\"hljs-number\">1</span>;<br>           &#125;<br>           <span class=\"hljs-keyword\">if</span>(num &lt; <span class=\"hljs-number\">1</span>)&#123;<br>               nums[n0++] = <span class=\"hljs-number\">0</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2444-统计定界子数组的数目\"><a href=\"#2444-统计定界子数组的数目\" class=\"headerlink\" title=\"2444. 统计定界子数组的数目\"></a><a href=\"https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/\">2444. 统计定界子数组的数目</a></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">countSubarrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> minK, <span class=\"hljs-type\">int</span> maxK)</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-comment\">// 窗口中最后一出现minK下标</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minIndex</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">// 窗口中最后一出现maxK下标</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxIndex</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">// 窗口左边界</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; nums.length;i++)&#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[i];<br>            <span class=\"hljs-comment\">// 寻找最后一次出现minK或者maxK的下标</span><br>            <span class=\"hljs-comment\">// 为什么要这样做：因为当窗口确定时，[left,right]中一定存在minK和maxK，此时如果窗口中出现多个minK和maxK</span><br>            <span class=\"hljs-comment\">// 如果对应的下标越靠后，能够确定的子数组越多，防止统计不到</span><br>            <span class=\"hljs-keyword\">if</span>(num == minK)&#123;<br>                minIndex = i;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(num == maxK)&#123;<br>                maxIndex = i;<br>            &#125;<br>            <span class=\"hljs-comment\">// 当出现一个小于minK或者大于maxK的值时，重置窗口</span><br>            <span class=\"hljs-keyword\">if</span>( num &gt; maxK || num &lt; minK)&#123;<br>                left = i+<span class=\"hljs-number\">1</span>;<br>                minIndex = -<span class=\"hljs-number\">1</span>;<br>                maxIndex = -<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 能够组成窗口时，累加答案</span><br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(minIndex != -<span class=\"hljs-number\">1</span> &amp;&amp; maxIndex != -<span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-comment\">// [left - minIndex - maxIndex - right] 或 [left - maxIndex - minIndex - right]</span><br>                <span class=\"hljs-comment\">// 此时[left ... min]都是满足条件的子数组</span><br>                ans += Math.min(maxIndex, minIndex) - left + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"2302-统计得分小于-K-的子数组数目\"><a href=\"#2302-统计得分小于-K-的子数组数目\" class=\"headerlink\" title=\"2302. 统计得分小于 K 的子数组数目\"></a><a href=\"https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/\">2302. 统计得分小于 K 的子数组数目</a></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">countSubarrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">long</span> k)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;right &lt; nums.length;right++)&#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[right];<br>        <span class=\"hljs-comment\">// 将当前数加入窗口中</span><br>        sum += num;<br>        <span class=\"hljs-comment\">// 内循环，如果当前窗口和*窗口长度 大于等于 k时，移动左窗口，直至窗口满足条件</span><br>        <span class=\"hljs-keyword\">while</span> (sum * (right - left + <span class=\"hljs-number\">1</span>) &gt;= k)&#123;<br>            sum -= nums[left];<br>            left++;<br>        &#125;<br>        <span class=\"hljs-comment\">// 这里是随着当前数加入窗口后当增加的子数组个数，而不是当前窗口内能够组成的子数组个数</span><br>        <span class=\"hljs-comment\">// 比如[2,1,4,3]当4加入窗口中时，增加的子数组为[2,1,4,3],[1,4,3],[4,3],[4]共计4个</span><br>        <span class=\"hljs-comment\">// 因为之前的已经统计过了，不用再次计算</span><br>        ans += right - left + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"3270-求出数字答案\"><a href=\"#3270-求出数字答案\" class=\"headerlink\" title=\"3270. 求出数字答案\"></a><a href=\"https://leetcode.cn/problems/find-the-key-of-the-numbers/\">3270. 求出数字答案</a></h1><h2 id=\"1-字符串判断\"><a href=\"#1-字符串判断\" class=\"headerlink\" title=\"1.字符串判断\"></a>1.字符串判断</h2><p>先把这三个数转为填充后的字符串，然后对每一位进行判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">generateKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2, <span class=\"hljs-type\">int</span> num3)</span> &#123;<br>        List&lt;Integer&gt; numList = List.of(num1, num2, num3);<br>        ArrayList&lt;String&gt; strings = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        numList.forEach(num-&gt;&#123;<br>            <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(Integer.toString(num));<br>            <span class=\"hljs-comment\">// 在前面补0的个数</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span> - s.length();<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; count;i++)&#123;<br>                s.insert(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;0&quot;</span>);<br>            &#125;<br>            strings.add(String.valueOf(s));<br>        &#125;);<br>        <span class=\"hljs-comment\">//System.out.println(&quot;strings = &quot; + strings);</span><br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">4</span>;i++)&#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Character.MAX_VALUE;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;j &lt; <span class=\"hljs-number\">3</span>;j++)&#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> strings.get(j);<br>                min =  Math.min(min,s.charAt(i) - <span class=\"hljs-string\">&#x27;0&#x27;</span>);<br>            &#125;<br>            builder.append(min);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Integer.parseInt(builder.toString());<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-从最低位开始计算\"><a href=\"#2-从最低位开始计算\" class=\"headerlink\" title=\"2. 从最低位开始计算\"></a>2. 从最低位开始计算</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">generateKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2, <span class=\"hljs-type\">int</span> num3)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pow</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) &#123;<br>            <span class=\"hljs-comment\">// 获取这三个数最小各位值</span><br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> Math.min(num1 % <span class=\"hljs-number\">10</span>, num2 % <span class=\"hljs-number\">10</span>);<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Math.min(t, num3 % <span class=\"hljs-number\">10</span>);<br>            ans = ans + min * pow;<br>            num1 /= <span class=\"hljs-number\">10</span>;<br>            num2 /= <span class=\"hljs-number\">10</span>;<br>            num3 /= <span class=\"hljs-number\">10</span>;<br>            pow *= <span class=\"hljs-number\">10</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"75-颜色分类\"><a href=\"#75-颜色分类\" class=\"headerlink\" title=\"75. 颜色分类\"></a><a href=\"https://leetcode.cn/problems/sort-colors/\">75. 颜色分类</a></h1><p>思路就是用分别用一个计数器，分别记录0和（0,1)出现的次数，此时n0就是到目前为止出现的最后一个0的下标，n1同理。然后总是假设当前这块板是蓝色的，为它刷上蓝色，接着判断当前值是否等于1，如果是，则把它刷为白色，0也是同理，类似刷油漆的过程，旧的会被新的覆盖。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sortColors</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums)</span> &#123;<br>       <span class=\"hljs-comment\">// 到第i个数为止，出现0的次数，也就是到目前为止，最后一个0的下标</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n0</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-comment\">// 到第i个数为止，出现0和1的次数，也就是到目前为止，最后一个1的下标</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; nums.length;i++)&#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[i];<br>           nums[i] = <span class=\"hljs-number\">2</span>;<br>           <span class=\"hljs-keyword\">if</span>(num &lt; <span class=\"hljs-number\">2</span>)&#123;<br>               nums[n1++] = <span class=\"hljs-number\">1</span>;<br>           &#125;<br>           <span class=\"hljs-keyword\">if</span>(num &lt; <span class=\"hljs-number\">1</span>)&#123;<br>               nums[n0++] = <span class=\"hljs-number\">0</span>;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2444-统计定界子数组的数目\"><a href=\"#2444-统计定界子数组的数目\" class=\"headerlink\" title=\"2444. 统计定界子数组的数目\"></a><a href=\"https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/\">2444. 统计定界子数组的数目</a></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">countSubarrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> minK, <span class=\"hljs-type\">int</span> maxK)</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-comment\">// 窗口中最后一出现minK下标</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minIndex</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">// 窗口中最后一出现maxK下标</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxIndex</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">// 窗口左边界</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;i &lt; nums.length;i++)&#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[i];<br>            <span class=\"hljs-comment\">// 寻找最后一次出现minK或者maxK的下标</span><br>            <span class=\"hljs-comment\">// 为什么要这样做：因为当窗口确定时，[left,right]中一定存在minK和maxK，此时如果窗口中出现多个minK和maxK</span><br>            <span class=\"hljs-comment\">// 如果对应的下标越靠后，能够确定的子数组越多，防止统计不到</span><br>            <span class=\"hljs-keyword\">if</span>(num == minK)&#123;<br>                minIndex = i;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(num == maxK)&#123;<br>                maxIndex = i;<br>            &#125;<br>            <span class=\"hljs-comment\">// 当出现一个小于minK或者大于maxK的值时，重置窗口</span><br>            <span class=\"hljs-keyword\">if</span>( num &gt; maxK || num &lt; minK)&#123;<br>                left = i+<span class=\"hljs-number\">1</span>;<br>                minIndex = -<span class=\"hljs-number\">1</span>;<br>                maxIndex = -<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 能够组成窗口时，累加答案</span><br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(minIndex != -<span class=\"hljs-number\">1</span> &amp;&amp; maxIndex != -<span class=\"hljs-number\">1</span>)&#123;<br>                <span class=\"hljs-comment\">// [left - minIndex - maxIndex - right] 或 [left - maxIndex - minIndex - right]</span><br>                <span class=\"hljs-comment\">// 此时[left ... min]都是满足条件的子数组</span><br>                ans += Math.min(maxIndex, minIndex) - left + <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"2302-统计得分小于-K-的子数组数目\"><a href=\"#2302-统计得分小于-K-的子数组数目\" class=\"headerlink\" title=\"2302. 统计得分小于 K 的子数组数目\"></a><a href=\"https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/\">2302. 统计得分小于 K 的子数组数目</a></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">countSubarrays</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">long</span> k)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;right &lt; nums.length;right++)&#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> nums[right];<br>        <span class=\"hljs-comment\">// 将当前数加入窗口中</span><br>        sum += num;<br>        <span class=\"hljs-comment\">// 内循环，如果当前窗口和*窗口长度 大于等于 k时，移动左窗口，直至窗口满足条件</span><br>        <span class=\"hljs-keyword\">while</span> (sum * (right - left + <span class=\"hljs-number\">1</span>) &gt;= k)&#123;<br>            sum -= nums[left];<br>            left++;<br>        &#125;<br>        <span class=\"hljs-comment\">// 这里是随着当前数加入窗口后当增加的子数组个数，而不是当前窗口内能够组成的子数组个数</span><br>        <span class=\"hljs-comment\">// 比如[2,1,4,3]当4加入窗口中时，增加的子数组为[2,1,4,3],[1,4,3],[4,3],[4]共计4个</span><br>        <span class=\"hljs-comment\">// 因为之前的已经统计过了，不用再次计算</span><br>        ans += right - left + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-04-27T10:08:47.513Z","updated":"2025-04-27T09:30:03.105Z","comments":1,"layout":"post","photos":[],"_id":"cma0xlyzt000144v9cq1641me","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}